@page "/gofish"

@using CardGamesLibrary.Shared

@inject GoFishService GoFishService

<h3>Go Fish Card Game</h3>

@if (GoFishService == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="StartNewGame">New Game</button>
    </div>
    <div class="alert alert-info">@GoFishService.Message</div>
    <div>
        <h5>Computer's Hand</h5>
        <div class="go-fish-hand-row">
            @* To show computer's cards faceup for debugging, use:
            @foreach (var card in GoFishService.Computer.Hand)
            {
                <GoFishCardDisplay Card="card" />
            }
            Otherwise, show card backs: *@
            @for (int i = 0; i < GoFishService.Computer.Hand.Count; i++)
            {
                <GoFishCardDisplay Card="null" />
            }
        </div>
        <div class="mt-2">
            <strong>Computer's Books:</strong> @string.Join(", ", GoFishService.Computer.Books)
        </div>
    </div>
    <div class="mt-4">
        <h5>Your Hand</h5>
        <div>
            @foreach (var card in GoFishService.Human.Hand.OrderBy(c => c.Rank))
            {
                var highlight = card.Equals(LastReceivedCard) && LastReceivedTurn == TurnCounter - 1;
                <button class="btn btn-outline-dark p-0 m-0 border-0 bg-transparent" style="cursor:pointer;" @onclick="() => RequestCard(card.Rank)" disabled="@(GoFishService.CurrentPlayer != GoFishService.Human || GoFishService.GameOver)">
                    <GoFishCardDisplay Card="card" Highlight="@highlight" />
                </button>
            }
        </div>
        <div class="mt-2">
            <strong>Your Books:</strong> @string.Join(", ", GoFishService.Human.Books)
        </div>
        <div class="mb-2">
            @if (RecommendedRank != null)
            {
                <span class="alert alert-secondary p-2">
                    <strong>Recommended card to ask for:</strong> @RecommendedRank
                    <br />
                    <small>
                        (You have @GoFishService.Human.Hand.Count(c => c.Rank == RecommendedRank) of this rank, which is the most in your hand.)
                        @if (LastComputerAskedRank == RecommendedRank)
                        {
                            <br /><span>(The computer just asked for this rank, so it may have one!)</span>
                        }
                        @if (SimulatedOpponentHand.ContainsKey(RecommendedRank.Value) && SimulatedOpponentHand[RecommendedRank.Value] > 0)
                        {
                            <br /><span>(Simulation: Opponent is likely to have this card based on their recent asks.)</span>
                        }
                    </small>
                </span>
            }
        </div>
    </div>
    <div class="mt-3">
        <strong>Cards left in deck:</strong> @GoFishService.Deck.Count
    </div>
    <div class="mt-3">
        <strong>Estimated Opponent's Hand:</strong>
        @if (SimulatedOpponentHand.Count == 0)
        {
            <span>Not enough information yet.</span>
        }
        else
        {
            <ul>
                @foreach (var kvp in SimulatedOpponentHand.OrderByDescending(kvp => kvp.Value))
                {
                    <li>@kvp.Key: @kvp.Value likely</li>
                }
            </ul>
        }
    </div>
    <div class="mt-3">
        <strong>Opponent has asked for these ranks:</strong>
        @if (OpponentAskedRanks.Count == 0)
        {
            <span>None yet.</span>
        }
        else
        {
            <span>@string.Join(", ", OpponentAskedRanks)</span>
        }
    </div>
}

@code {
    protected Rank? LastComputerAskedRank;
    protected List<Rank> OpponentAskedRanks = new();
    private Card? LastReceivedCard;
    private int LastReceivedTurn = -1;
    private int TurnCounter = 0;

    protected override void OnInitialized()
    {
        GoFishService.ComputerAsked += (rank) => {
            LastComputerAskedRank = rank;
            OpponentAskedRanks.Add(rank);
        };
        if (GoFishService.Human.Hand.Count == 0 && GoFishService.Computer.Hand.Count == 0)
        {
            GoFishService.StartNewGame();
        }
    }

    protected void StartNewGame()
    {
        GoFishService.StartNewGame();
        LastComputerAskedRank = null;
        OpponentAskedRanks.Clear();
        StateHasChanged();
    }

    protected void RequestCard(Rank rank)
    {
        if (!GoFishService.GameOver && GoFishService.CurrentPlayer == GoFishService.Human)
        {
            int prevHandCount = GoFishService.Human.Hand.Count;
            GoFishService.RequestCard(rank);
            StateHasChanged();
            // Find the new card(s) received
            if (GoFishService.Human.Hand.Count > prevHandCount)
            {
                var newCard = GoFishService.Human.Hand
                    .GroupBy(c => c)
                    .OrderByDescending(g => g.Count())
                    .SelectMany(g => g)
                    .Except(GoFishService.Human.Hand.Take(prevHandCount))
                    .FirstOrDefault();
                if (newCard == null)
                {
                    // fallback: highlight any card of the requested rank
                    newCard = GoFishService.Human.Hand.FirstOrDefault(c => c.Rank == rank);
                }
                LastReceivedCard = newCard;
                LastReceivedTurn = TurnCounter;
            }
            TurnCounter++;
        }
    }

    protected string GetSuitSymbol(Suit suit)
    {
        return suit switch
        {
            Suit.Hearts => "♥",
            Suit.Diamonds => "♦",
            Suit.Clubs => "♣",
            Suit.Spades => "♠",
            _ => "?"
        };
    }

    protected bool IsRedSuit(Suit suit)
    {
        return suit == Suit.Hearts || suit == Suit.Diamonds;
    }

    protected Dictionary<Rank, int> SimulatedOpponentHand => SimulateOpponentHand();

    private Dictionary<Rank, int> SimulateOpponentHand()
    {
        var dict = new Dictionary<Rank, int>();
        if (LastComputerAskedRank != null)
        {
            dict[LastComputerAskedRank.Value] = 1;
        }
        return dict;
    }

    protected Rank? RecommendedRank =>
        GoFishService.Human.Hand
            .GroupBy(c => c.Rank)
            .OrderByDescending(g => g.Count())
            .Where(g => !GoFishService.Human.Books.Contains(g.Key))
            .Select(g => g.Key)
            .OrderByDescending(r => SimulatedOpponentHand.ContainsKey(r) ? SimulatedOpponentHand[r] : 0)
            .FirstOrDefault();
}
