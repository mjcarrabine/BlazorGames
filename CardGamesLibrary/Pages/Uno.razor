@page "/uno"

@using CardGamesLibrary.Shared
@using Microsoft.AspNetCore.Components.Web
@inject UnoGameService GameService

<PageTitle>Uno</PageTitle>

<div style="display: flex; align-items: center; gap: 1rem;">
    <h1 style="margin: 0;">Uno</h1>
    <a href="https://service.mattel.com/instruction_sheets/42001pr.pdf" target="_blank" rel="noopener noreferrer">Instructions</a>
</div>

@if (!GameService.GameStarted && !string.IsNullOrWhiteSpace(GameService.Message) && (GameService.Message.Contains("win") || GameService.Message.Contains("Win")))
{
    <div class="alert alert-success">@GameService.Message</div>
    <button class="btn btn-success" @onclick="StartNewGame">Start Uno Game</button>
}
else if (!GameService.GameStarted)
{
    <button class="btn btn-success" @onclick="StartNewGame">Start Uno Game</button>
}
else
{
    <h3>Computer's Hand</h3>
    <ul class="list-unstyled d-flex flex-wrap">
        @foreach (var card in GameService.ComputerHand)
        {
            <li class="me-2 mb-2" style="display:inline-block;">
                <UnoCardDisplay Card="null" />
            </li>
        }
    </ul>

    <div class="my-3">
        <div style="font-weight: bold; font-size: 1.2em; margin-bottom: 0.3em;">Draw Pile</div>
        <div style="display: flex; align-items: flex-start;">
            <div style="display: flex; flex-direction: column; align-items: center;">
                <UnoCardDisplay FaceDown="true" />
                <span style="font-size: 1.1em; margin-top: 0.2em;">@GameService.DrawPile.Count</span>
            </div>
            <span style="margin-left: 2rem;"></span>
            <UnoCardDisplay Card="GameService.TopCard" />
        </div>
    </div>

    <h3>Your Hand</h3>
    <ul class="list-unstyled d-flex flex-wrap">
        @foreach (var card in GameService.GetSortedPlayerHand())
        {
            <li class="me-2 mb-2" style="display:inline-block;">
                <UnoCardDisplay Card="card" />
                @if (GameService.PlayerTurn && GameService.CanPlay(card))
                {
                    <div class="mt-1 text-center">
                        @if (card.Color == UnoColor.Wild)
                        {
                            <button class="btn btn-sm btn-primary" @onclick="() => PromptWildColor(card)">Play</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-primary" @onclick="() => PlayCard(card)">Play</button>
                        }
                    </div>
                }
            </li>
        }
    </ul>
    @if (GameService.AwaitingWildColor && pendingWildCard != null)
    {
        <div class="mb-2">
            <span>Select a color:</span>
            @foreach (UnoColor color in Enum.GetValues(typeof(UnoColor)))
            {
                if (color != UnoColor.Wild)
                {
                    var bgColor = color switch
                    {
                        UnoColor.Red => "#dc3545", // Bootstrap red
                        UnoColor.Yellow => "#ffc107", // Bootstrap yellow
                        UnoColor.Green => "#198754", // Bootstrap green
                        UnoColor.Blue => "#0d6efd", // Bootstrap blue
                        _ => "#6c757d" // fallback gray
                    };
                    // Improve contrast for yellow
                    var textColor = color == UnoColor.Yellow ? "black" : "white";
                    <button class="btn btn-outline-dark ms-1" style="background-color: @bgColor; color: @textColor; border-color: @bgColor;" @onclick="() => ConfirmWildColor(pendingWildCard, color)">@color</button>
                }
            }
        </div>
    }
    <button class="btn btn-secondary mb-2" @onclick="DrawCard" disabled="@(!GameService.PlayerTurn)">Draw Card</button>
    <div class="alert alert-info">@GameService.Message</div>
}

@code {
    UnoCard? pendingWildCard;
    void StartNewGame()
    {
        pendingWildCard = null;
        GameService.AwaitingWildColor = false;
        GameService.StartGame();
        StateHasChanged();
    }
    void PromptWildColor(UnoCard card)
    {
        pendingWildCard = card;
        GameService.AwaitingWildColor = true;
        StateHasChanged();
    }
    void ConfirmWildColor(UnoCard card, UnoColor color)
    {
        GameService.PlayCard(card, color);
        pendingWildCard = null;
        StateHasChanged();
    }
    void PlayCard(UnoCard card)
    {
        GameService.PlayCard(card);
        StateHasChanged();
    }
    async Task DrawCard()
    {
        if (GameService.PlayerTurn)
        {
            int handCountBefore = GameService.PlayerHand.Count;
            GameService.PlayerDrawCards(1);
            // Try to play the drawn card automatically if possible
            var newCard = GameService.PlayerHand.LastOrDefault();
            if (newCard != null && GameService.CanPlay(newCard))
            {
                // If the drawn card is playable, prompt for wild or play it
                if (newCard.Color == UnoColor.Wild && (newCard.Value == UnoValue.Wild || newCard.Value == UnoValue.WildDrawFour))
                {
                    PromptWildColor(newCard);
                }
                else
                {
                    PlayCard(newCard);
                }
            }
            else
            {
                // End turn if not playable
                GameService.PlayerTurn = false;
                GameService.ComputerMove();
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
